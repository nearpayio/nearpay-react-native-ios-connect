import type Job from './entities/Job';
import type { Callback, DiscoverDevicesCallback, LogoutReasonCallback, NPRequest } from './types';
export declare class NearpayConnect {
    private core;
    private auth;
    private terminal;
    private proxy;
    private emitter;
    constructor();
    startListners(): void;
    onProxyPaired(callback: Callback): void;
    onProxyUnpaired(callback: Callback): void;
    onProxyConnected(callback: Callback): void;
    onProxyDisconnected(callback: Callback): void;
    startDeviceDiscovery(callback: DiscoverDevicesCallback): void;
    onLogout(callback: LogoutReasonCallback): void;
    onPause(callback: Callback): void;
    onResume(callback: Callback): void;
    onDisconnect(callback: Callback): void;
    onReconnectSuggestion(callback: Callback): void;
    onStatusChange(callback: Callback): void;
    onStartPurchase(callback: Callback): void;
    onStartRefund(callback: Callback): void;
    onStartReverse(callback: Callback): void;
    onStartReconciliation(callback: Callback): void;
    onCancelPurchase(callback: Callback): void;
    onCancelRefund(callback: Callback): void;
    onCancelReverse(callback: Callback): void;
    onCancelReconciliation(callback: Callback): void;
    onJobStatusChange(callback: Callback): void;
    onEvent(callback: Callback): void;
    onJobError(callback: Callback): void;
    onTerminalError(callback: Callback): void;
    build(port: number, environment: string, networkConfiguration: string, loadingUi: boolean, deviceName: string): Promise<any>;
    showConnection(): Promise<any>;
    startConnection(): Promise<any>;
    stopConnection(): Promise<any>;
    stopDeviceDiscovery(): Promise<boolean>;
    connect(timeout: number, ip: string, port: string): Promise<boolean>;
    disconnect(): Promise<boolean>;
    ping(timeout: number): Promise<boolean>;
    login(method: string, value: string, timeout: number): Promise<any>;
    verify(otp: string, timeout: number): Promise<any>;
    getTerminalList(timeout: number): Promise<any>;
    logout(timeout: number): Promise<boolean>;
    connectTerminal(terminalID: string, timeout: number): Promise<any>;
    disconnectFromCurrentTerminal(timeout: number): Promise<boolean>;
    getInfo(timeout: number): Promise<any>;
    purchase(purchaseData: NPRequest): Promise<any>;
    refund(refundData: NPRequest): Promise<any>;
    reverse(reverseData: NPRequest): Promise<any>;
    reconcile(reconcileData: NPRequest): Promise<any>;
    start(job: Job): Promise<any>;
    cancel(job: Job): Promise<any>;
    getTransaction(transactionRequest: NPRequest): Promise<any>;
    getReconciliation(reconciliationRequest: NPRequest): Promise<any>;
    getTransactionList(transactionListRequest: NPRequest): Promise<any>;
    getReconciliationList(reconciliationListRequest: NPRequest): Promise<any>;
    disconnectTerminal(timeout: number): Promise<any>;
}
//# sourceMappingURL=%20NearpayConnectService.d.ts.map